// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostApiAuthLinkData, PostApiAuthLinkResponse, DeleteApiAuthLinkData, DeleteApiAuthLinkResponse, GetApiAuthMagicData, GetApiAuthMagicResponse, PostApiAuthMagicData, PostApiAuthMagicResponse, GetApiAuthOauthByProviderData, GetApiAuthOauthByProviderResponse, GetApiAuthOauthCallbackByProviderData, PostApiAuthPasswordRegisterData, PostApiAuthPasswordRegisterResponse, PostApiAuthPasswordConfirmData, PostApiAuthPasswordConfirmResponse, GetApiAuthPasswordConfirmData, GetApiAuthPasswordConfirmResponse, PostApiAuthLoginData, PostApiAuthLoginResponse, GetApiReportsByIdData, GetApiReportsByIdResponse, DeleteApiReportsByIdData, DeleteApiReportsByIdResponse, PatchApiReportsByIdData, PatchApiReportsByIdResponse, GetApiReportsData, GetApiReportsResponse, PostApiReportsData, PostApiReportsResponse, GetApiAuthLogoutData, GetApiAuthLogoutResponse, PostApiAuthTokenData, PostApiAuthTokenResponse, GetApiAuthTokenIntrospectResponse } from './types.gen';

/**
 * Link account to user
 * Links account from body to a user
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown OK
 * @throws ApiError
 */
export const postApiAuthLink = (data: PostApiAuthLinkData): CancelablePromise<PostApiAuthLinkResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/link',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        404: 'Not Found'
    }
}); };

/**
 * UnLink account
 * UnLinks OAuth account from a user
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown OK
 * @throws ApiError
 */
export const deleteApiAuthLink = (data: DeleteApiAuthLinkData): CancelablePromise<DeleteApiAuthLinkResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/auth/link',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        404: 'Not Found'
    }
}); };

/**
 * Magic callback
 * Authenticates user using magic link in route
 * @param data The data for the request.
 * @param data.code
 * @returns GenerateTokenResult OK
 * @throws ApiError
 */
export const getApiAuthMagic = (data: GetApiAuthMagicData): CancelablePromise<GetApiAuthMagicResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/auth/magic',
    query: {
        code: data.code
    },
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * Send magic link
 * Sends magic link to the specified email
 * @param data The data for the request.
 * @param data.requestBody
 * @returns SendMagicLinkResponse OK
 * @throws ApiError
 */
export const postApiAuthMagic = (data: PostApiAuthMagicData): CancelablePromise<PostApiAuthMagicResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/magic',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * OAuth redirect to provider
 * Redirects to a given provider for authentification
 * @param data The data for the request.
 * @param data.provider
 * @param data.redirectAfter
 * @returns unknown OK
 * @throws ApiError
 */
export const getApiAuthOauthByProvider = (data: GetApiAuthOauthByProviderData): CancelablePromise<GetApiAuthOauthByProviderResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/auth/oauth/{provider}',
    path: {
        provider: data.provider
    },
    query: {
        redirectAfter: data.redirectAfter
    }
}); };

/**
 * OAuth callback
 * Callback for OAuth providers
 * @param data The data for the request.
 * @param data.provider
 * @param data.code
 * @param data.state
 * @throws ApiError
 */
export const getApiAuthOauthCallbackByProvider = (data: GetApiAuthOauthCallbackByProviderData): CancelablePromise<void> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/auth/oauth/callback/{provider}',
    path: {
        provider: data.provider
    },
    query: {
        code: data.code,
        state: data.state
    },
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * Password register
 * Register user using password and email
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown OK
 * @throws ApiError
 */
export const postApiAuthPasswordRegister = (data: PostApiAuthPasswordRegisterData): CancelablePromise<PostApiAuthPasswordRegisterResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/password/register',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * Send confirmation email
 * Send confirmation email using password flow
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown OK
 * @throws ApiError
 */
export const postApiAuthPasswordConfirm = (data: PostApiAuthPasswordConfirmData): CancelablePromise<PostApiAuthPasswordConfirmResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/password/confirm',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * Confirm account
 * Confirm password account using token
 * @param data The data for the request.
 * @param data.token
 * @returns GenerateTokenResult OK
 * @throws ApiError
 */
export const getApiAuthPasswordConfirm = (data: GetApiAuthPasswordConfirmData): CancelablePromise<GetApiAuthPasswordConfirmResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/auth/password/confirm',
    query: {
        token: data.token
    },
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * Login using password
 * Login using email and password and password flow
 * @param data The data for the request.
 * @param data.requestBody
 * @returns GenerateTokenResult OK
 * @throws ApiError
 */
export const postApiAuthLogin = (data: PostApiAuthLoginData): CancelablePromise<PostApiAuthLoginResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/login',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * Get report by id
 * Returns report using specified id
 * @param data The data for the request.
 * @param data.id
 * @returns GetReportResponse OK
 * @throws ApiError
 */
export const getApiReportsById = (data: GetApiReportsByIdData): CancelablePromise<GetApiReportsByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/reports/{id}',
    path: {
        id: data.id
    },
    errors: {
        404: 'Not Found'
    }
}); };

/**
 * Delete a specified report
 * Deletes a report with specified id
 * @param data The data for the request.
 * @param data.id
 * @returns void No Content
 * @throws ApiError
 */
export const deleteApiReportsById = (data: DeleteApiReportsByIdData): CancelablePromise<DeleteApiReportsByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/reports/{id}',
    path: {
        id: data.id
    },
    errors: {
        404: 'Not Found'
    }
}); };

/**
 * Update a specified report
 * Updates a report with specified id
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns unknown OK
 * @throws ApiError
 */
export const patchApiReportsById = (data: PatchApiReportsByIdData): CancelablePromise<PatchApiReportsByIdResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/reports/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        404: 'Not Found'
    }
}); };

/**
 * Get report using filter
 * Returns reports using filter
 * @param data The data for the request.
 * @param data.pageSize
 * @param data.pageNumber
 * @param data.targetId
 * @param data.authorId
 * @param data.start
 * @param data.finish
 * @param data.isResolved
 * @param data.minimumSeverity
 * @param data.maximumSeverity
 * @param data.resolvedBy
 * @returns GetReportResponse OK
 * @throws ApiError
 */
export const getApiReports = (data: GetApiReportsData): CancelablePromise<GetApiReportsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/reports',
    query: {
        TargetId: data.targetId,
        AuthorId: data.authorId,
        Start: data.start,
        Finish: data.finish,
        IsResolved: data.isResolved,
        MinimumSeverity: data.minimumSeverity,
        MaximumSeverity: data.maximumSeverity,
        ResolvedBy: data.resolvedBy,
        PageSize: data.pageSize,
        PageNumber: data.pageNumber
    },
    errors: {
        404: 'Not Found'
    }
}); };

/**
 * Create report
 * Creates report for user or issue
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Created
 * @throws ApiError
 */
export const postApiReports = (data: PostApiReportsData): CancelablePromise<PostApiReportsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/reports',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * Sign out user
 * Sign out user. Deletes cookie and refresh token
 * @param data The data for the request.
 * @param data.tokenType
 * @returns unknown OK
 * @throws ApiError
 */
export const getApiAuthLogout = (data: GetApiAuthLogoutData): CancelablePromise<GetApiAuthLogoutResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/auth/logout',
    query: {
        tokenType: data.tokenType
    }
}); };

/**
 * Refresh JWT token
 * Refreshes JWT token using refresh token
 * @param data The data for the request.
 * @param data.grantType
 * @returns GenerateTokenResult OK
 * @throws ApiError
 */
export const postApiAuthToken = (data: PostApiAuthTokenData): CancelablePromise<PostApiAuthTokenResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/token',
    query: {
        grantType: data.grantType
    },
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * Gets a minimal user info
 * Gets a user info. Used instead of token introspection. For more user info use another method.
 * @returns GetMeResponse OK
 * @throws ApiError
 */
export const getApiAuthTokenIntrospect = (): CancelablePromise<GetApiAuthTokenIntrospectResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/auth/token/introspect'
}); };